package dev.codescreen.marketplace.service.impl;

import dev.codescreen.marketplace.dto.ProductDto;
import dev.codescreen.marketplace.dto.StoreDto;
import dev.codescreen.marketplace.model.Product;
import dev.codescreen.marketplace.model.Store;
import dev.codescreen.marketplace.repository.ProductRepository;
import dev.codescreen.marketplace.repository.StoreRepository;
import dev.codescreen.marketplace.service.ProductService;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

/**
 * Implementation of {@link ProductService} that stores products in memory.
 */
@Service
public class InMemoryProductService implements ProductService {

    /**
     * Method add new product to given store and returns info about created method.
     *
     * @param productDto    product dto that need to be created(added)
     * @param storeId       id of the store where new product need to be added
     * @return              created product dto
     */
	
	private final ProductRepository  productRepository;
	private  StoreDto storeDto;

    public InMemoryProductService(ProductRepository  productRepository) {
        this. productRepository =  productRepository;
    }
    
    private StoreRepository  storeRepository;
   
    private StoreDto createStore(String name, String email, String phone, Long storeId) {
        StoreDto store = new StoreDto();
        store.setName(name);
        store.setEmail(email);
        store.setPhone(phone);
        store.setId(storeId);
        storeRepository.save(store.toEntity());
        return store;
    }
    
    @Override
    public ProductDto addProduct(ProductDto productDto, Long storeId) {
        //TODO Implement 
    var p = new Product();
  //s  var s = new Store();
    
    createStore (null, null, null, storeId);
    //store.setId();
 
    
    p.setName(productDto.getName());
    p.setPrice(productDto.getPrice());
    p.setId(productDto.getId());    
    p.setStoreId(storeId);
    System.out.println(storeId+" -Memory");
    productRepository.save(p);
    return ProductDto.of(p);
    }
	
    /**
    @Override
    public ProductDto addProduct(ProductDto productDto, Long storeId) {
        //TODO Implement
    	 Product addProduct = productRepository.save(productDto.toEntity());
    	
         return ProductDto.of(addProduct);
  //      throw new UnsupportedOperationException();
    }

    /**
     * Method to get product by it's id
     *
     * @param productId     the Id of product that we want to get
     * @return              returns the Optional object that keeping product dto
     */
    @Override
    public Optional<ProductDto> getProduct(Long productId) {
        //TODO Implement
    	  return productRepository.findById(productId)
                  .map(ProductDto::of);
      //  throw new UnsupportedOperationException();
    }

    /**
     * Method allows to find all products with given name
     *
     * @param productName   the name of the product we want to find
     * @return              list of products with given name sorted by product price (cheapest first)
     */
    @Override
    public List<ProductDto> findProductsByName(String productName) {
        //TODO Implement
    	  return productRepository.findByName(productName)
                  .stream()
                  .map(ProductDto::of)
                  .collect(Collectors.toList());
     //   throw new UnsupportedOperationException();
    }

    /**
     * Method returns all the products from the single store by given store id
     *
     * @param storeId       the store id to get all products
     * @return              list of product from the store with given id
     */
    @Override
    public List<ProductDto> findProductsByStoreId(Long storeId) {
        //TODO Implement
    	 return productRepository.findByStoreId(storeId)
                 .stream()
                 .map(ProductDto::of)
                 .collect(Collectors.toList());
      //  throw new UnsupportedOperationException();
    }
    
   
    
    
}
