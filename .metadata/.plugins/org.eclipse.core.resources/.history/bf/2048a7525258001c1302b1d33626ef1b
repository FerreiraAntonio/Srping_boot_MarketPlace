package dev.codescreen.marketplace.controller;

import java.util.List;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.server.ResponseStatusException;


import dev.codescreen.marketplace.dto.ProductDto;
import dev.codescreen.marketplace.model.Product;
import dev.codescreen.marketplace.repository.ProductRepository;
import dev.codescreen.marketplace.service.ProductService;
import dev.codescreen.marketplace.service.impl.InMemoryProductService;

@Controller
@RestController
@RequestMapping("/product")
public class ProductController {



    // TODO: Implement Product APIs here
	
	@Autowired
    private ProductService productService;
	 
	 @Autowired(required = false)
	    private InMemoryProductService inMemoryProductService;
	 

	 
	 @PostMapping("/post")
	    @ResponseStatus(HttpStatus.CREATED)
	    public ProductDto salvar(@RequestBody ProductDto productDto){
		 return inMemoryProductService.addProduct(productDto, null);
	    }

	    @GetMapping("/")
	    @ResponseStatus(HttpStatus.OK)
	    public List<ProductDto> findAll() {
	    	        return inMemoryProductService.getAllProducts();
	    }
	    /*
	 @GetMapping("/{id}")
	    @ResponseStatus(HttpStatus.OK)
	    public ProductDto findById(@PathVariable( "id") Long id){
	        return inMemoryProductService.getProduct(id)
	                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Cliente nao encontrado."));
	
  		 
	               
	    }*/
/*
	    @DeleteMapping("/{id}")
	    @ResponseStatus(HttpStatus.NO_CONTENT)
	    public void removerCliente(@PathVariable("id") Long id){
	        clienteService.buscarPorId(id)
	                .map(cliente -> {
	                    clienteService.removerPorId(cliente.getId());
	                    return Void.TYPE;
	                }).orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Cliente nao encontrado."));
	    }
	  

	    
	    @PutMapping("/{id}")
	    @ResponseStatus(HttpStatus.NO_CONTENT)
	    public void atualizarCliente(@PathVariable("id") Long id, @RequestBody Cliente cliente){
	        clienteService.buscarPorId(id)
	                .map(clienteBase -> {
	                    modelMapper.map(cliente, clienteBase);
	                    clienteService.salvar(clienteBase);
	                    return Void.TYPE;
	                }).orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Cliente nao encontrado."));
	    }
  */

	}
